pbq: Query properties of a protocol buffer.

Usage:

    pbq <query> [--stdin_fmt=<fmt>] < <proto>

Decode a protocol buffer from stdin and query properties of it.
Accepts either text or binary-format protocol buffers, controlled
using --stdin_fmt={pb,pbtxt}.

Supported Queries
-----------------

    pbq ProgramGraph
      Prints an entire program graph.

    pbq ProgramGraph.Node.text
      Prints the text of each node in a graph, one node per line.

    pbq ProgramGraphList
      Prints an entire list of program graphs.

    pbq ProgramGraphFeaturesList
      Prints an entire program graph features list.

    pbq Ir
      Prints an entire IR message.

    pbq Ir.text
      Prints the text of an IR.

    pbq IrList
      Prints an entire IR message list.

    pbq SourceFile
      Prints an entire SourceFile message.

    pbq Checkpoint
      Prints an entire Checkpoint message.

    pbq NodeIndexList
      Prints an entire NodeIndexList message.

    pbq 'SELECT COUNT(graph) FROM ProgramGraphFeaturesList'
      Count the number of program graphs in a list of program graph features.

    pbq 'SELECT COUNT(node_features.data_flow_value) FROM ProgramGraphFeaturesList.graph'
      Count the total number of data flow values in a list of program graph features.

Example usages
--------------

Read a binary program graph to a human-readable format:

  $ pbq ProgramGraph < graph.pb

Print the IR text from a binary-format IR protocol buffer:

  $ cat program.Ir.pb | pbq Ir.text --stdin_fmt=pb

Print the text representation of the nodes in a graph derived from LLVM-IR:

  $ llvm2graph foo.ll | pbq ProgramGraph.Node.text

  Flags from external/com_github_gflags_gflags/src/gflags.cc:
    -flagfile (load flags from file) type: string default: ""
    -fromenv (set flags from the environment [use 'export FLAGS_flag1=value'])
      type: string default: ""
    -tryfromenv (set flags from the environment if present) type: string
      default: ""
    -undefok (comma-separated list of flag names that it is okay to specify on
      the command line even if the program does not define a flag with that
      name.  IMPORTANT: flags in this list that have arguments MUST use the
      flag=value format) type: string default: ""

  Flags from external/com_github_gflags_gflags/src/gflags_completions.cc:
    -tab_completion_columns (Number of columns to use in output for tab
      completion) type: int32 default: 80
    -tab_completion_word (If non-empty, HandleCommandLineCompletions() will
      hijack the process and attempt to do bash-style command line flag
      completion on this value.) type: string default: ""

  Flags from external/com_github_gflags_gflags/src/gflags_reporting.cc:
    -help (show help on all flags [tip: all flags can have two dashes])
      type: bool default: false
    -helpfull (show help on all flags -- same as -help) type: bool
      default: false currently: true
    -helpmatch (show help on modules whose name contains the specified substr)
      type: string default: ""
    -helpon (show help on the modules named by this flag value) type: string
      default: ""
    -helppackage (show help on all modules in the main package) type: bool
      default: false
    -helpshort (show help on only the main module for this program) type: bool
      default: false
    -helpxml (produce an xml version of help) type: bool default: false
    -version (show version and build info and exit) type: bool default: false



  Flags from programl/util/stdin_fmt.cc:
    -stdin_fmt (The type of input format to use. Valid options are: "pbtxt"
      which reads a text format protocol buffer, "pb" which reads a binary
      format protocol buffer, or "json" which reads a JSON format protocol
      buffer.) type: string default: "pbtxt"

  Flags from programl/util/stdout_fmt.cc:
    -stdout_fmt (The format of output. Valid options are: "pbtxt" for a
      text-format protocol buffer, "pb" for a binary format protocol buffer, or
      "json" for JSON. Text format protocol buffers are recommended for
      human-readable output, binary-format for efficient and fast file storage,
      and JSON for processing with third-party tools such as `jq`.)
      type: string default: "pbtxt"
